'use strict';

const gulp = require('gulp');

/* liste des plugins chargÃ©s :
run-sequence
gulp-concat
gulp-babel
gulp-jshint
gulp-ng-annotate
gulp-rename
gulp-sourcemaps
gulp-sass
gulp-uglify
gulp-inject
gulp-plumber
gulp-changed
merge-stream
gulp-angular-filesort
gulp-plumber
gulp-ngdocs
*/
const plugins = require('gulp-load-plugins')();

plugins.runSequence = require('run-sequence');
plugins.mergeStream = require('merge-stream');
plugins.streamSeries = require('stream-series');

const VENDOR_SCRIPTS = [
	'vendors/angular/angular.min.js',
	
	'vendors/angular-aria/angular-aria.min.js',
	'vendors/angular-animate/angular-animate.min.js',
	'vendors/angular-messages/angular-messages.min.js',

	'vendors/angular-material/angular-material.min.js',

	'vendors/angular-ui-router/release/angular-ui-router.min.js',
	'vendors/angular-ui-router.stateHelper/statehelper.min.js',
];

const NG_DOCS_FIX = ['assets/ngdocsfix/**/*.js'];

const SCRIPTS = [
	'scripts/**/*.module.js',
	'scripts/**/*.js'
];

const SCSS_FILES = [
	'styles/**/*.scss',
];

const CSS_FILES = [
	'vendors/angular-material/angular-material.min.css'
];

const DEST_DEV = '.tmp';
const DEST_PROD = 'www';
const ASSETS = 'assets';

gulp.task('inject:dev', () => {
	return gulp.src('assets/index.html')
		.pipe(plugins.plumber())
		.pipe(plugins.inject(
				plugins.mergeStream(
					gulp.src(['**/*.js'], {read: true, cwd: `${__dirname}/${DEST_DEV}`})
						.pipe(plugins.angularFilesort()),
					gulp.src(['**/*.css'], {read: false, cwd: `${__dirname}/${DEST_DEV}`})
				)
			))
		.pipe(gulp.dest(DEST_DEV));
});

gulp.task('sass:dev', () => {
	return gulp.src(SCSS_FILES, {cwd: `${__dirname}/${ASSETS}`})
		.pipe(plugins.plumber())
		.pipe(plugins.sourcemaps.init())
		.pipe(plugins.sass({indentedSyntax: false, errLogToConsole: true}))
		.pipe(plugins.sourcemaps.write())
		.pipe(gulp.dest(`${DEST_DEV}/styles`))
});

gulp.task('imagecopy', () => {
	return gulp.src([`${ASSETS}/images/**/*.svg`])
		.pipe(gulp.dest(`${DEST_DEV}/images`));
});

gulp.task('scripts:dev', () => {
	let vendorScriptsStream = gulp.src( VENDOR_SCRIPTS, {cwd: `${__dirname}/${ASSETS}`} )
		.pipe(plugins.plumber())
		.pipe(gulp.dest(`${DEST_DEV}/vendors`));

	let sassStream = gulp.src(SCSS_FILES, {cwd: `${__dirname}/${ASSETS}`})
		.pipe(plugins.plumber())
		.pipe(plugins.sourcemaps.init())
		.pipe(plugins.sass({indentedSyntax: false, errLogToConsole: true}))
		.pipe(plugins.sourcemaps.write())
		.pipe(gulp.dest(`${DEST_DEV}/styles`));

	let templates = gulp.src([`${ASSETS}/**/*.html`])
		.pipe(plugins.plumber())
		.pipe(gulp.dest(`${DEST_DEV}`));

	let myScriptsStream = gulp.src( SCRIPTS, 		{cwd: `${__dirname}/${ASSETS}`} )
		.pipe(plugins.plumber())
		// .pipe(plugins.jshint({ esversion: 6 }))
  //       .pipe(plugins.jshint.reporter('jshint-stylish'))
		.pipe(plugins.sourcemaps.init())
		.pipe(plugins.ngAnnotate())
		.pipe(plugins.babel({ presets: ['es2015'] }))
		// .pipe(plugins.concat('main.js'))
		// .pipe(plugins.uglify())
		.pipe(plugins.sourcemaps.write())
		// .pipe(rename('main.js'))
		.pipe(gulp.dest(`${DEST_DEV}/scripts`));

	let stream3 = gulp.src('assets/index.html')
		.pipe(plugins.plumber())
		.pipe(plugins.inject(
			plugins.streamSeries(vendorScriptsStream, myScriptsStream, sassStream),
			{ ignorePath: '.tmp/', addRootSlash: true }
		))
		.pipe(gulp.dest(`${DEST_DEV}`));

	return stream3;
});

gulp.task('createDocumentation', [], function () {
	// console.log(plugins.ngdocs);
	return gulp.src('assets/scripts/**/*.js')
		.pipe(plugins.plumber())
		.pipe(plugins.ngdocs.process({
			startPage: '',
			html5Mode: false
		}))
		.pipe(gulp.dest(`${DEST_DEV}/docs`));
});

gulp.task('ngdocsfix', ['createDocumentation'], function () {
	return gulp.src(NG_DOCS_FIX)
		.pipe(plugins.plumber())
		.pipe(gulp.dest(`${DEST_DEV}/docs/js`));
});

gulp.task('watch:dev', () => {
	gulp.watch(`assets/scripts/**/*.js`, ['scripts:dev', 'ngdocsfix']);
	gulp.watch(`assets/styles/**/*.scss`, ['sass:dev']);
});

gulp.task('build:dev', () => {
	plugins.runSequence(['scripts:dev', 'ngdocsfix', 'imagecopy'], ['watch:dev']);
});

